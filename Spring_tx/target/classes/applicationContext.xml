<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
">
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <context:component-scan base-package="com.yuye">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    <!--<bean id="accountDao" class="com.yuye.dao.impl.AccountDaoImpl">
        <property name="jdbcTemplate" ref="jdbcTemplate"></property>
    </bean>
    <bean id="accountService" class="com.yuye.service.impl.AccountServiceImpl">
        <property name="accountDao" ref="accountDao" ></property>
    </bean>-->
    <!--配置sessionFactory-->
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <!--mybatis配置文件-->
        <property name="configLocation" value="classpath:sqlMapConfig-spring.xml"></property>
    </bean>
    <!--扫描mapper所在的包 为mapper创建实现类-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer" >
        <property name="basePackage" value="com.yuye.mapper"></property>
    </bean>
    <!--单独创建相应的mapper对象-->
    <bean id="accountMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.yuye.mapper.AccountMapper"></property>
        <property name="sqlSessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--配置平台事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--通知 事务的增强-->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            &lt;!&ndash;name表示事务方法名称可以用*代表所有   isolation 事务隔离级别   propagation事务的传播行为  &ndash;&gt;
            <tx:method name="tra nsfer" isolation="READ_COMMITTED" timeout="1" propagation="MANDATORY"/>
        </tx:attributes>
    </tx:advice>-->
    <!--事务aop织入-->
    <!--<aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.yuye.service.impl.*.*(..))"></aop:advisor>
    </aop:config>-->
    <!--事务注解驱动，使用注解必须写上注解驱动-->
    <tx:annotation-driven />
</beans>